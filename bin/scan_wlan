#!/usr/bin/env python

import argparse, os, re, subprocess, sys, time

from gps import *

from datetime    import datetime
from dateutil.tz import tzlocal

import math

from musicpi_lcd.daemon import detach, check_if_running, create_pid_file

def distance_on_unit_sphere(lon1, lat1, lon2, lat2):
    if abs(lon1-lon2) < 1e-10 and abs(lat1-lat2) < 1e-10:
        return 0
    
    # Convert latitude and longitude to 
    # spherical coordinates in radians.
    degrees_to_radians = math.pi/180.0
    
    # phi = 90 - latitude
    phi1 = (90.0 - lat1)*degrees_to_radians
    phi2 = (90.0 - lat2)*degrees_to_radians
    
    # theta = longitude
    theta1 = lon1*degrees_to_radians
    theta2 = lon2*degrees_to_radians
    
    # Compute spherical distance from spherical coordinates.
    
    # For two locations in spherical coordinates 
    # (1, theta, phi) and (1, theta, phi)
    # cosine( arc length ) = 
    #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'
    # distance = rho * arc length
    
    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + 
           math.cos(phi1)*math.cos(phi2))
    arc = math.acos( cos )

    # Remember to multiply arc by the radius of the earth 
    # in your favorite set of units to get length.
    return arc

class parser(object):
    
    def __init__(self, device='wlan0', use_gps=True, mindist=10):
        self.device  = device
        self.use_gps = use_gps
        self.gpsdata = None
        self.mindist = mindist

    def reset(self):
        self.nets = []
        self.current = {}
        
    def dump_json(self):
        for n in self.nets:
            print n
            
    def location(self):
        lon, lat, gpstime = 0, 0, ''
        session = gps(mode=WATCH_ENABLE)
        for report in session:
            if report['class'] == 'DEVICE':
                # Clean up our current connection.
                session.close()
                # Tell gpsd we're ready to receive messages.
                session = gps(mode=WATCH_ENABLE)
                # Do more stuff
            elif report['class'] == 'TPV':
                if dict(report).has_key('lon') and dict(report).has_key('lat'):
                    lon     = float(report['lon'])
                    lat     = float(report['lat'])
                    gpstime = str(report['time'])
                    break
        session.close()

        return type('gpsinfo',(object,),{'lon': lon, 'lat': lat, 'time': gpstime})

    def timestamp(self):
        localtime = datetime.now(tzlocal()).replace(microsecond=0)
        return localtime.isoformat()
    
    def update(self):
        self.reset()
        if self.use_gps:
            self.gpsdata_old = self.gpsdata if self.gpsdata else None
            self.gpsdata = self.location()
            d = self.mindist
            if self.gpsdata_old:
                d =  6371000 * distance_on_unit_sphere(
                    self.gpsdata_old.lon, self.gpsdata_old.lat,
                    self.gpsdata.lon,     self.gpsdata.lat)
            if d < self.mindist:
                #print 'distance from last position: %f meters' % d
                return
        self.time    = self.timestamp()
        try:
            output = self.execute()
            lines = output.split('\n')
            for line in lines:
                self.parse_line(line)
            if len(self.current):
                self.nets += [ self.current ]
        except subprocess.CalledProcessError, e:
            time.sleep(5)

class iwlist_parser(parser):
    def __init__(self, *args, **kwargs):
        super(iwlist_parser,self).__init__(*args, **kwargs)
    
    def execute(self):
        return subprocess.check_output( ['iwlist', self.device, 'scan'] )
    
    def parse_line(self,line):
        if line.startswith(self.device):
            return
        oldlen = len(line)
        line = line.strip()
        newlen = len(line)
        newindent = oldlen - newlen
        if not len(line):
            return
        if line.startswith('Cell'):
            if len(self.current):
                self.nets += [self.current]
                self.current = {}
            self.current['time'] = self.time
            if self.gpsdata:
                self.current.update({
                    'lon'    : self.gpsdata.lon,
                    'lat'    : self.gpsdata.lat,
                    'gpstime': self.gpsdata.time,
                })
            line = ' '.join(line.split('-')[1:]).strip()
    
        colon = line.find(':')
        if colon != -1:
            key = line[:colon].strip().lower().replace(' ','_').replace('(','').replace(')','')
            if key in ['ie', 'extra']:
                return
            val = line[colon+1:].strip()
            if len(val) and val[0] == '"':
                val = val[1:-1]
            if key in ['address']:
                self.current[key] = val.lower()
            else:
                self.current[key] = val
        elif line.startswith('Quality'):
            tmp = line.split()
            quality, siglvl = (tmp[0], ''.join(tmp[1:]))
            self.current['quality']       = quality.split('=')[1].split('/')[0]
            self.current['signal_level']  = siglvl.split('=')[1].split('/')[0]
        else:
            pass

    def debug(self):
        #printkeys = ['ESSID', 'Address', 'Quality', 'Signal level', 'Encryption key']
        printkeys = [ k for k in self.nets[0].keys() if k not in ['IE', 'Extra']]
        #printkeys = ['Protocol', 'Pairwise Ciphers (1)', 'Encryption key', 'Bit Rates', 'Signal level', 'Frequency', 'Mode', 'Address', 'Authentication Suites (1)', 'Quality', 'Group Cipher', 'ESSID']
        maxlength = max([len(k) for k in printkeys])
        for i in self.nets:
            for k in printkeys:
                print k.ljust(maxlength), i[k]
            print

class wpacli_parser(parser):
    def __init__(self, *args, **kwargs):
        super(wpacli_parser,self).__init__(*args, **kwargs)

    def execute(self):
        subprocess.check_output(('wpa_cli -i %s scan' % self.device).split())
        return subprocess.check_output(('wpa_cli -i %s scan_results' % self.device).split())

    def parse_line(self, line):
        if not re.match( r'^[a-f0-9]{2}:.*', line):
            return
        bssid, freq, signal, flags, ssid = line.split()
        net = {
            'bssid'  : bssid,
            'freq'   : freq,
            'signal' : signal,
            'flags'  : flags,
            'ssid'   : ssid,
            'time'   : self.time,
        }
        if self.gpsdata:
            net.update({
                'lon'    : self.gpsdata.lon,
                'lat'    : self.gpsdata.lat,
                'gpstime': self.gpsdata.time,
            })
        self.nets.append( net)

def main():
    name = os.path.basename(__file__)
    parser = argparse.ArgumentParser(description=name)
    parser.add_argument( '-d', '--daemon',
                         help='run as daemon',   action="store_true")
    parser.add_argument( '-k', '--kill-running',
                         help='kill if running', action="store_true")
    parser.add_argument( '-n', '--interval', metavar='SECS', type=int, default=1,
                         help='log data every SECS seconds (default: %(default)s)')
    parser.add_argument( '-m', '--mode', metavar='MODE', type=str, default='iwlist',
                         help='use either iwlist or wpacli backend (default: %(default)s)')
    parser.add_argument( '-o', '--output', metavar='FILE', type=str, default='-',
                         help='select output file (or - for stdout) (default: %(default)s)')
    parser.add_argument( '-g', '--gps',
                         help="add location from GPS", action="store_true")
    parser.add_argument( '-l', '--mindist', metavar='METERS', type=float, default=10,
                         help='minimum distance of gps track points (default: %(default)s)')
    cmdargs = parser.parse_args()
    
    if check_if_running(name, kill=cmdargs.kill_running):
        print "Already running, exiting"
        sys.exit(0)

    if cmdargs.daemon: detach()
    create_pid_file(name)
    
    if cmdargs.output != '-':
        sys.stdout = open(cmdargs.output, 'w')
    
    if cmdargs.mode == 'iwlist':
        p = iwlist_parser(use_gps=cmdargs.gps,mindist=cmdargs.mindist)
    elif cmdargs.mode == 'wpacli':
        p = wpacli_parser(use_gps=cmdargs.gps,mindist=cmdargs.mindist)
    else:
        print "Unknown mode", cmdargs.mode
        return 1
    
    while True:
        p.update()
        p.dump_json()
        sys.stdout.flush()
        time.sleep(cmdargs.interval)
    
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
